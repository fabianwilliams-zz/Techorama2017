<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationErrorMessage" xml:space="preserve">
    <value>Oops!
We couldn't connect to Office 365. Check your debug output for errors.</value>
  </data>
  <data name="ConnectPrompt" xml:space="preserve">
    <value>Tap the "connect" button to connect to your personal or work or school account.</value>
  </data>
  <data name="MailContents" xml:space="preserve">
    <value>&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv='Content-Type' content='text/html; charset=us-ascii'&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body style='font-family:calibri'&gt;
&lt;h2&gt;Hello Good Folks at Techorama BE 2017!&lt;/h2&gt;
&lt;p&gt;This demo by Fabian Williams MVP is demonstrating how you can send messages with the Microsoft Graph API as well as Save and Get Files from OneDrive for Business and Read User Information. It is my hope tha you will use the Microsoft Graph endpoints in building your apps after leaving this Session.&lt;/p&gt;&lt;a href='{0}'&gt;See the photo that was just uploaded!&lt;/a&gt;
&lt;h3&gt;Do this NOW! NOW! NOW!&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Copy or Clone Fabians Github Repo for this Event &lt;a href='https://github.com/fabianwilliams/Techorama2017'&gt;github.com/fabianwilliams/Techorama2017&lt;/a&gt; I will keep this updated for all future sessions I build on this concept.&lt;/li&gt;
&lt;li&gt;Follow me on Social Media &lt;a href='https://twitter.com/fabianwilliams'&gt;Fabian Williams on Twitter&lt;/a&gt; to keep up with my ramblings.&lt;/li&gt;
&lt;li&gt;Connect with me on LinkedIn &lt;a href='https://www.linkedin.com/in/fabiangwilliams'&gt;Fabian Williams on LinkedIn&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;What's next?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Check out &lt;a href='https://developer.microsoft.com/graph'&gt;developer.microsoft.com/graph&lt;/a&gt; to start building Microsoft Graph apps today with all the latest tools, templates, and guidance to get started quickly.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href='https://developer.microsoft.com/graph/graph-explorer'&gt;Graph Explorer&lt;/a&gt; to explore the rest of the APIs and start your testing.&lt;/li&gt;
&lt;li&gt;Browse other &lt;a href='https://github.com/search?p=5&amp;q=org%3Amicrosoftgraph+sample&amp;type=Repositories&amp;utf8=%E2%9C%93'&gt;samples on GitHub&lt;/a&gt; to see more of the APIs in action.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks, and happy coding!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Fabian Williams and Your Microsoft Graph samples development team &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="MailErrorMessage" xml:space="preserve">
    <value>Oops!

We couldn't send an mail. Check your debug output for errors.</value>
  </data>
  <data name="MailSubject" xml:space="preserve">
    <value>Fabian Williams channeling MSFT Adele Vance - Techorama 2017.</value>
  </data>
  <data name="NoClientIdMessage" xml:space="preserve">
    <value>Oops - It looks like this app is not registered with the v2.0 authentication endpoint, because we don't see a client id in App.xaml.  To run this sample, register it in the App Registration Portal. See Readme for more info.</value>
  </data>
  <data name="SendMailPrompt" xml:space="preserve">
    <value>You're now connected to Microsoft Graph. Tap "send mail" to send a message from your account using Microsoft Graph.</value>
  </data>
  <data name="SendMailSuccess" xml:space="preserve">
    <value>We successfully  sent an email to {0} !</value>
  </data>
</root>